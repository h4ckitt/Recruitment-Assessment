// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// NumberValidator is an autogenerated mock type for the NumberValidator type
type NumberValidator struct {
	mock.Mock
}

// GetCodeFromCountry provides a mock function with given fields: name
func (_m *NumberValidator) GetCodeFromCountry(name string) (string, error) {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: _a0
func (_m *NumberValidator) Validate(_a0 string) (string, string, string, bool) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 bool
	if rf, ok := ret.Get(3).(func(string) bool); ok {
		r3 = rf(_a0)
	} else {
		r3 = ret.Get(3).(bool)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewNumberValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewNumberValidator creates a new instance of NumberValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNumberValidator(t mockConstructorTestingTNewNumberValidator) *NumberValidator {
	mock := &NumberValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
